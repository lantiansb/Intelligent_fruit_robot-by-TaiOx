<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Output\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Output\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu May 04 06:35:38 2023
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Dev_Init &rArr; ESP8266_Init &rArr; UsartPrintf &rArr; vsnprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">ADC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[14]">BFTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[15]">BFTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[23]">BootProcess</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[d]">COMP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[9]">EVWUP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[11]">GPTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[10]">GPTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f5xxxx_01_it.o(i.HardFault_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[16]">I2C0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1f]">I2S_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[6]">LVD_BOD_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[f]">MCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ht32f5xxxx_01_it.o(i.NMI_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[21]">PDMA_CH0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[22]">PDMA_CH2_5_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from ht32f5xxxx_01_it.o(i.PendSV_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2a]">Reset_Handler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1e]">SCI_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[12]">SCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[13]">SCTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[18]">SPI0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[19]">SPI1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from ht32f5xxxx_01_it.o(i.SVC_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from ht32f5xxxx_01_it.o(i.SysTick_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_ht32f5xxxx_01.o(i.SystemInit) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1c]">UART0_IRQHandler</a> from k210.o(i.UART0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1d]">UART1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1a]">USART0_IRQHandler</a> from esp8266.o(i.USART0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1b]">USART1_IRQHandler</a> from servo.o(i.USART1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[20]">USB_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[25]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[29]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[28]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[27]">fputc</a> from ht32_retarget.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2a]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))

<P><STRONG><a name="[e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[14]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>LVD_BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>MCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PDMA_CH0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PDMA_CH2_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[2d]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SCTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SCTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[2f]"></a>SCTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[18]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[31]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[20]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[32]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[34]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[b8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[ba]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_UnPacketPublish
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Order_UnPacket
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_UnPacketPublish
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PacketConnect
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[69]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetIPD
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_UnPacketRecv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_UnPacketPublish
</UL>

<P><STRONG><a name="[6a]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetIPD
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_UnPacketPublish
</UL>

<P><STRONG><a name="[6d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PacketSubscribe
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PacketConnect
</UL>

<P><STRONG><a name="[82]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PacketSubscribe
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PacketConnect
</UL>

<P><STRONG><a name="[91]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Order_UnPacket
</UL>

<P><STRONG><a name="[3a]"></a>strtok_r</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, strtok_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok_r
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Order_UnPacket
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtok$wrapper
</UL>

<P><STRONG><a name="[39]"></a>_strtok$wrapper</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtok_r.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>

<P><STRONG><a name="[3b]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Order_UnPacket
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Translate_Angle2Pulse
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Translate_Angle2Pulse
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Translate_Angle2Pulse
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_out
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_out
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[c2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[c3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c4]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[c5]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[41]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[33]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c6]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[4b]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[4f]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[c7]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__decompress2</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>AFIO_GPxConfig</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ht32f5xxxx_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_PWM_Init
</UL>

<P><STRONG><a name="[50]"></a>CKCU_GetClocksFrequency</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetClocksFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPLLFrequency
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
</UL>

<P><STRONG><a name="[51]"></a>CKCU_GetPLLFrequency</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPLLFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_GetPLLFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[54]"></a>CKCU_GetPeripFrequency</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPeripFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[71]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 60 bytes, Stack size 28 bytes, ht32f5xxxx_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_PWM_Init
</UL>

<P><STRONG><a name="[55]"></a>Dev_Init</STRONG> (Thumb, 370 bytes, Stack size 8 bytes, main.o(i.Dev_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Dev_Init &rArr; ESP8266_Init &rArr; UsartPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_reset_begin
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_start
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeOrder
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_DevLink
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayTurn
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>ESP8266_Clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, esp8266.o(i.ESP8266_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESP8266_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Order_UnPacket
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendData
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCmd
</UL>

<P><STRONG><a name="[67]"></a>ESP8266_GetIPD</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_GetIPD))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ESP8266_GetIPD &rArr; delay_ms &rArr; delay_us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitRecive
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Order_UnPacket
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_DevLink
</UL>

<P><STRONG><a name="[5f]"></a>ESP8266_Init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, esp8266.o(i.ESP8266_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ESP8266_Init &rArr; UsartPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartPrintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[6c]"></a>ESP8266_SendCmd</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, esp8266.o(i.ESP8266_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ESP8266_SendCmd &rArr; delay_ms &rArr; delay_us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitRecive
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendData
</UL>

<P><STRONG><a name="[6f]"></a>ESP8266_SendData</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, esp8266.o(i.ESP8266_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ESP8266_SendData &rArr; ESP8266_SendCmd &rArr; delay_ms &rArr; delay_us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeOrder
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_DevLink
</UL>

<P><STRONG><a name="[68]"></a>ESP8266_WaitRecive</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, esp8266.o(i.ESP8266_WaitRecive))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetIPD
</UL>

<P><STRONG><a name="[89]"></a>GPIO_ClearOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ClearOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[73]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[75]"></a>GPIO_DriveConfig</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, ht32f5xxxx_gpio.o(i.GPIO_DriveConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_DriveConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[99]"></a>GPIO_InputConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_Init
</UL>

<P><STRONG><a name="[74]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[58]"></a>GPIO_SetOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_SetOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>LED_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[79]"></a>MCTM_CHMOECmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_mctm.o(i.MCTM_CHMOECmd))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_PWM_Init
</UL>

<P><STRONG><a name="[76]"></a>MCTM_PWM_Init</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, pwm.o(i.MCTM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MCTM_PWM_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_CHMOECmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OutputInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_Init
</UL>

<P><STRONG><a name="[7b]"></a>MQTT_DeleteBuffer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mqttkit.o(i.MQTT_DeleteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MQTT_DeleteBuffer &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeOrder
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_DevLink
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PacketSubscribe
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PacketConnect
</UL>

<P><STRONG><a name="[81]"></a>MQTT_DumpLength</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mqttkit.o(i.MQTT_DumpLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MQTT_DumpLength
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PacketSubscribe
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PacketConnect
</UL>

<P><STRONG><a name="[7d]"></a>MQTT_NewBuffer</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mqttkit.o(i.MQTT_NewBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MQTT_NewBuffer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PacketSubscribe
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PacketConnect
</UL>

<P><STRONG><a name="[7f]"></a>MQTT_PacketConnect</STRONG> (Thumb, 722 bytes, Stack size 48 bytes, mqttkit.o(i.MQTT_PacketConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MQTT_PacketConnect &rArr; MQTT_NewBuffer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_NewBuffer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_DumpLength
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_DeleteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_DevLink
</UL>

<P><STRONG><a name="[83]"></a>MQTT_PacketSubscribe</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, mqttkit.o(i.MQTT_PacketSubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MQTT_PacketSubscribe &rArr; MQTT_NewBuffer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_NewBuffer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_DumpLength
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_DeleteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeOrder
</UL>

<P><STRONG><a name="[85]"></a>MQTT_ReadLength</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, mqttkit.o(i.MQTT_ReadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MQTT_ReadLength
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_UnPacketRecv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_UnPacketPublish
</UL>

<P><STRONG><a name="[8f]"></a>MQTT_UnPacketConnectAck</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mqttkit.o(i.MQTT_UnPacketConnectAck))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_DevLink
</UL>

<P><STRONG><a name="[84]"></a>MQTT_UnPacketPublish</STRONG> (Thumb, 468 bytes, Stack size 56 bytes, mqttkit.o(i.MQTT_UnPacketPublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MQTT_UnPacketPublish &rArr; MQTT_ReadLength
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ReadLength
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Order_UnPacket
</UL>

<P><STRONG><a name="[87]"></a>MQTT_UnPacketRecv</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mqttkit.o(i.MQTT_UnPacketRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MQTT_UnPacketRecv &rArr; MQTT_ReadLength
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_ReadLength
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_DevLink
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OLED_Clear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Clear &rArr; OLED_Refresh &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[5a]"></a>OLED_ColorTurn</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, oled.o(i.OLED_ColorTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_ColorTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[5b]"></a>OLED_DisplayTurn</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, oled.o(i.OLED_DisplayTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_DisplayTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[8d]"></a>OLED_DrawPoint</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, oled.o(i.OLED_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>

<P><STRONG><a name="[59]"></a>OLED_Init</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; OLED_Refresh &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[5d]"></a>OLED_Refresh</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, oled.o(i.OLED_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Refresh &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ScrollDisplay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[8a]"></a>OLED_ScrollDisplay</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, oled.o(i.OLED_ScrollDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_ScrollDisplay &rArr; OLED_ShowChinese &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>OLED_ShowChar</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>

<P><STRONG><a name="[8b]"></a>OLED_ShowChinese</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, oled.o(i.OLED_ShowChinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_ShowChinese &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ScrollDisplay
</UL>

<P><STRONG><a name="[5c]"></a>OLED_ShowString</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[88]"></a>OLED_WR_Byte</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayTurn
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
</UL>

<P><STRONG><a name="[60]"></a>OneNet_DevLink</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, onenet.o(i.OneNet_DevLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = OneNet_DevLink &rArr; ESP8266_SendData &rArr; ESP8266_SendCmd &rArr; delay_ms &rArr; delay_us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendData
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetIPD
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_UnPacketRecv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_UnPacketConnectAck
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PacketConnect
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_DeleteBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[90]"></a>Order_UnPacket</STRONG> (Thumb, 282 bytes, Stack size 224 bytes, onenet.o(i.Order_UnPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Order_UnPacket &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetIPD
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Clear
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_UnPacketPublish
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>PWM_Init</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, pwm.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PWM_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseStructInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OutputInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_CRRPreloadCmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_CHCCRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_start
</UL>

<P><STRONG><a name="[97]"></a>PWM_SetDuty</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pwm.o(i.PWM_SetDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PWM_SetDuty &rArr; TM_SetCaptureCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetCaptureCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_start
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_out
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>SERIAL_PutChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32_serial.o(i.SERIAL_PutChar))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>SYSTICK_ClockSourceConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[b0]"></a>SYSTICK_CounterCmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[af]"></a>SYSTICK_IntConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[ae]"></a>SYSTICK_SetReloadValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_SetReloadValue))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[61]"></a>SubscribeOrder</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, onenet.o(i.SubscribeOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SubscribeOrder &rArr; ESP8266_SendData &rArr; ESP8266_SendCmd &rArr; delay_ms &rArr; delay_us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PacketSubscribe
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_DeleteBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, system_ht32f5xxxx_01.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>TM_CHCCRPreloadConfig</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, ht32f5xxxx_tm.o(i.TM_CHCCRPreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TM_CHCCRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[94]"></a>TM_CRRPreloadCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_CRRPreloadCmd))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[95]"></a>TM_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[7a]"></a>TM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_PWM_Init
</UL>

<P><STRONG><a name="[78]"></a>TM_OutputInit</STRONG> (Thumb, 202 bytes, Stack size 28 bytes, ht32f5xxxx_tm.o(i.TM_OutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TM_OutputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_PWM_Init
</UL>

<P><STRONG><a name="[98]"></a>TM_SetCaptureCompare</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, ht32f5xxxx_tm.o(i.TM_SetCaptureCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TM_SetCaptureCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDuty
</UL>

<P><STRONG><a name="[77]"></a>TM_TimeBaseInit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_PWM_Init
</UL>

<P><STRONG><a name="[93]"></a>TM_TimeBaseStructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[62]"></a>Track_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, track.o(i.Track_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Track_Init &rArr; MCTM_PWM_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCTM_PWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[9a]"></a>Translate_Angle2Pulse</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, servo.o(i.Translate_Angle2Pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Translate_Angle2Pulse &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_out
</UL>

<P><STRONG><a name="[1c]"></a>UART0_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, k210.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USART0_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, esp8266.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USART1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, servo.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>USART_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>USART_Configuration</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, usart.o(i.USART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USART_Configuration &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[9b]"></a>USART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Sendbyte
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartPrintf
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>USART_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ht32f5xxxx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[9f]"></a>USART_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[a2]"></a>USART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Sendbyte
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartPrintf
</UL>

<P><STRONG><a name="[a0]"></a>USART_TxRxCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ht32f5xxxx_usart.o(i.USART_TxRxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_TxRxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[6b]"></a>UsartPrintf</STRONG> (Thumb, 74 bytes, Stack size 328 bytes, usart.o(i.UsartPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = UsartPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>

<P><STRONG><a name="[80]"></a>Usart_SendStr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usart.o(i.Usart_SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Usart_SendStr &rArr; Usart_Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Sendbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_PacketConnect
</UL>

<P><STRONG><a name="[6e]"></a>Usart_SendString</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usart.o(i.Usart_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Usart_SendString
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendData
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCmd
</UL>

<P><STRONG><a name="[a3]"></a>Usart_Sendbyte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usart.o(i.Usart_Sendbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usart_Sendbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendStr
</UL>

<P><STRONG><a name="[a4]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c9]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[8e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubscribeOrder
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Order_UnPacket
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_DevLink
</UL>

<P><STRONG><a name="[ca]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[cb]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[a6]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cc]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[70]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendData
</UL>

<P><STRONG><a name="[cd]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[ce]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[a7]"></a>__0vsnprintf</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cf]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[d0]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[d1]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[a1]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartPrintf
</UL>

<P><STRONG><a name="[4c]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[52]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ht32f5xxxx_ckcu.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_DevLink
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[d2]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[d3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[d4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[d5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5e]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = delay_ms &rArr; delay_us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_reset_begin
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetIPD
</UL>

<P><STRONG><a name="[ac]"></a>delay_us</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_SetReloadValue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_CounterCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClockSourceConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[27]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ht32_retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[7c]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_UnPacketPublish
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_DeleteBuffer
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 340 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = main &rArr; Dev_Init &rArr; ESP8266_Init &rArr; UsartPrintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Order_UnPacket
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ScrollDisplay
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7e]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_UnPacketPublish
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_NewBuffer
</UL>

<P><STRONG><a name="[63]"></a>pwm_start</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, servo.o(i.pwm_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pwm_start &rArr; PWM_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDuty
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>

<P><STRONG><a name="[b2]"></a>servo_out</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, servo.o(i.servo_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = servo_out &rArr; Translate_Angle2Pulse &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetDuty
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Translate_Angle2Pulse
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_reset_begin
</UL>

<P><STRONG><a name="[64]"></a>servo_reset_begin</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, servo.o(i.servo_reset_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = servo_reset_begin &rArr; servo_out &rArr; Translate_Angle2Pulse &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_out
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[23]"></a>BootProcess</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[a8]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a5]"></a>_printf_core</STRONG> (Thumb, 1760 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[ab]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[aa]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[29]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[28]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
